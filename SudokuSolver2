# File contains a checker (check_sudoku) and a solver (solve_sudoku)

# Both should work for any size square, but 9 x 9 is the standard size for a sudoku

# Input is a square list of lists representing a partially filled
# square of digits where each square
# contains one of the digits 1,2,3,4,5,6,7,8,9.
# Zero represents blanks.

# Output of the solver is a completely filled in square such that:

#   1. Each column of the square contains
#       each of the numbers from 1 to n exactly once.

#   2. Each row of the square contains each
#       of the numbers from 1 to n exactly once.

# Note: this is simplified version, 'real' sudoku also require sub-grids not to repeat numbers; could add that in later

# Output of the checker is True (the solution is valid) or False (the solution is not valid)
# Right now the checker is not very robust (improving this is another to-do)... 
# it assumes only 'good faith' solutions will be tried - there will not be any blanks left, numbers too large for the size of the square used, etc.

# Some Test Data

unsolved2=[[5,3,0,0,7,0,0,0,0],
           [6,0,0,1,9,5,0,0,0],
           [0,9,8,0,0,0,0,6,0],
           [8,0,0,0,6,0,0,0,3],
           [4,0,0,8,0,3,0,0,1],
           [7,0,0,0,2,0,0,0,6],
           [0,6,0,0,0,0,2,8,0],
           [0,0,0,4,1,9,0,0,5],
           [0,0,0,0,8,0,0,7,9]]

unsolved3 = [[1,0,0,0],
             [2,0,0,0],
             [0,0,0,0],
             [0,0,0,0]]


correct = [[1,2,3],
           [2,3,1],
           [3,1,2]]

incorrect = [[1,2,3,4],
             [2,3,1,3],
             [3,1,2,3],
             [4,4,4,4]]
             
incorrect_2 = [[1,2,3,4],
               [2,1,4,3],
               [3,4,1,2],
               [4,3,2,4]]
               
incorrect_3 = [[1,1,1,1],
               [2,2,2,2],
               [3,3,3,3],
               [4,4,4,4]]

incorrect_4 = [[1,2,3],
               [1,2,3],
               [1,2,3]]

# check_rows verifies that in a given row, any number occurs only once - returning True if that is the case, False otherwise

def check_rows(s):
    while s:
        row = s.pop()
        while row:
            current_number_to_check = row.pop()
            if current_number_to_check in row:
                return False
    return True

# convert_columns_to_rows switches the rows and columns of the input square and outputs the resulting square

def convert_columns_to_rows(s):
    t = []
    u=[]
    i = 0
    j = 0
    while i < len(s):
        while j < len(s):
            t.append(s[j][i])
            j = j + 1
        i = i + 1
        j = 0
        u.append(t)
        t=[]
    return u

# check_sudoku checks the rows of the input square and the columns of the input square.
# Columns are checked by first switching the rows and columns, then checking the rows of the resulting square

    # Note: checking the square destroys it - this should be changed to improve the code (e.g., if you return the square after checking it, it will be an empty list) 

def check_sudoku(sudoku_square):
    square_with_columns_changed_to_rows = convert_columns_to_rows(sudoku_square)
    return check_rows(sudoku_square) and check_rows(square_with_columns_changed_to_rows)
    
# initialize_unassigned_positions does two things: 
# 1) Creates a list called 'choices' of the valid numbers to use in the solution (which is just 1,...,n where n is the dimension of the square)
# 2) Creates a list called 'unassigned' of all of the positions (x,y) in the square that we need to fill in with numbers

def initialize_unassigned_positions(sudoku_square):

    choices = []
    unassigned = []
    x=0
    y=0
    while x < len(sudoku_square):
        choices.append(x+1)
        while y < len (sudoku_square):
            if sudoku_square[x][y] == 0:
                unassigned.append([[x,y],[]])    
            y = y + 1
        y = 0
        x = x + 1
    for entry in unassigned:
        for item in choices:
            entry[1].append(item)
    return choices, unassigned


# solve_sudoku takes an unsolved square as input and prints and returns a solution

def solve_sudoku(sudoku_square):

# import random so that we can select a random item from a list using random.choice(<list>)

    import random

# create the list of numbers to choose from, the list of positions where we need to fill in numbers, and store the original input square as a string
# so we can reference it later
    
    choices, unassigned = initialize_unassigned_positions(sudoku_square)
    original_square = ''
    for entry in sudoku_square:
        for item in entry:
            original_square = original_square+str(item)
    #print original_square
    

# we know we are finished when the unassigned list is empty (every position in the square has a number), so we do all of the logic in this while loop until that is the case

    while unassigned:

        # list the possibilities available for each unassigned square

        for entry in unassigned:                    

            # remove numbers already in the row from the list of possibilities

            j = 0
            while j < len(sudoku_square):
                if sudoku_square[entry[0][0]][j] in entry[1]:
                    entry[1].remove(sudoku_square[entry[0][0]][j])
                j = j + 1

            # remove numbers already in the column from the list of possibilities

            i = 0
            while i < len(sudoku_square):
                if sudoku_square[i][entry[0][1]] in entry[1]:                   
                    entry[1].remove(sudoku_square[i][entry[0][1]])                   
                i = i + 1                      
            
        # check all (x,y) positions and find the one with the shortest list of possibilities
            
        a = len(unassigned[0][1])
        position_with_fewest_possibilities = unassigned[0][0]
        for entry in unassigned:
            if len(entry[1]) < a:
                a = len(entry[1])
                position_with_fewest_possibilities = entry[0]

        # if a valid solution is not possible (some position has 0 possiblities left), start over by resetting the square and the unassigned lists to their original values
         
            # Note: currently does this by 're-building' the original square from the string that we stored initially... pretty sure there must be a better/easier way to do this
            # but everything else I tried resulted in the list I was trying to preserve as the initial input getting modified along the way so that at this point in the logic
            # it was no longer equivalent to the initial input

        if a == 0:
            #print 'starting over'
            #print original_square
            #print len(choices)
            sudoku_square = []
            row = []
            repopulator = original_square
            i = 0
            j = 0
            while i < len(choices):
                while j < len(choices):
                    row.append(int(repopulator[0]))
                    repopulator = repopulator[1:]
                    j = j + 1
                sudoku_square.append(row)
                row = []
                j = 0
                i = i + 1    
            choices, unassigned = initialize_unassigned_positions(sudoku_square)


        # otherwise (as long as a valid solution is still possible), assign a number to the position that had the fewest possibilities

            # Note: the assignment is just a random selection from the possible values - there should be a more sophisticated way to do this that would actually guarantee a solution
            # The random approach seems to work okay for the 9 x 9 square I tested it on but this could and probably should be improved by adding logic here
            # to somehow track the values that have already been tried and pick new ones appropriately

        else:
            for entry in unassigned:
                if entry[0] == position_with_fewest_possibilities:
                    value = random.choice(entry[1])
                    sudoku_square[entry[0][0]][entry[0][1]] = value
                    unassigned.remove(entry)       

# print and return the solution
        
    print 'The solution is:'
    print sudoku_square
    return sudoku_square

# This is a test of the 9x9 test square at the beginning of the file

print check_sudoku(solve_sudoku(unsolved2))

